// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @unique @default(cuid())
  userId             String  @unique
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  oauth_token        String? @db.Text
  oauth_token_secret String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @unique @default(cuid())
  sessionToken String   @unique
  userId       String   @unique
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserType {
  STUDENT
  TEACHER
}

model User {
  id            String    @id @unique @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?

  role       UserType?
  university String?

  createdAt DateTime @default(now())

  accounts        Account[]
  sessions        Session[]
  sections        Section[]
  classrooms      ClassRoom[] //only teachers will have this
  assignments     Assignment[]
  discussions     Discussion[]
  replies         Reply[]
  reactions       Reaction[]
  commentReceived Comment[]      @relation(name: "Receiver")
  commentSent     Comment[]      @relation(name: "Sender")
  memberships     Membership[] //only students will have this
  conversations   Conversation[]
  media           Media[]
  folders         Folder[]
  notes           Note[]
  events          Event[]
  reports         Report[]
}

enum SectionType {
  CREATION
  MEMBERSHIP
}

model Section {
  id String @id @unique @default(cuid())

  name      String
  isDefault Boolean @default(false)
  emojiUrl  String?

  creatorId String
  creator   User   @relation(fields: [creatorId], references: [id], onDelete: Cascade)

  sectionType SectionType
  order       Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  classrooms  ClassRoom[]
  memberships Membership[]
}

model ClassRoom {
  id          String  @id @unique @default(cuid())
  title       String
  description String?
  classCode   String  @unique

  protectedDomain String?

  sectionId String
  section   Section @relation(fields: [sectionId], references: [id], onDelete: Cascade)

  teacherId String
  teacher   User   @relation(fields: [teacherId], references: [id], onDelete: Cascade)

  viewCount Int? @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  students      Membership[]
  assignments   Assignment[]
  discussions   Discussion[]
  conversations Conversation[]
  notes         Note[]
  folders       Folder[]
}

model Membership {
  id String @id @unique @default(cuid())

  userId           String //can be both teacher or student
  user             User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  isTeacher        Boolean @default(false)
  renamedClassroom String?

  sectionId String
  section   Section @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  viewCount Int?    @default(0)

  classRoomId String
  classRoom   ClassRoom @relation(fields: [classRoomId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  submissions Submission[]
}

enum FEEDBACK_STATUS {
  LIKE
  DISLIKE
}

model Conversation {
  id String @id @unique @default(cuid())

  prompt String
  answer String

  feedback FEEDBACK_STATUS?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  classRoomId String?
  classRoom   ClassRoom? @relation(fields: [classRoomId], references: [id])

  noteId String?
  note   Note?   @relation(fields: [noteId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum DiscussionType {
  announcements
  general
  questionnaires
  ideas
}

model Discussion {
  id      String @id @unique @default(cuid())
  title   String
  content Json?

  discussionType DiscussionType

  isEdited Boolean? @default(false)

  classroomId String
  classroom   ClassRoom @relation(fields: [classroomId], references: [id], onDelete: Cascade)

  creatorId String
  creator   User   @relation(fields: [creatorId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  replies   Reply[]
  reactions Reaction[]
}

model Reply {
  id   String @id @unique @default(cuid())
  text String

  isEdited Boolean? @default(false)

  discussionId String
  discussion   Discussion @relation(fields: [discussionId], references: [id], onDelete: Cascade)

  creatorId String
  creator   User   @relation(fields: [creatorId], references: [id], onDelete: Cascade)

  replyId String?
  reply   Reply?  @relation("ReplyTo", fields: [replyId], references: [id], onDelete: Cascade)

  selected Boolean? @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  reactions Reaction[]
  replies   Reply[]    @relation("ReplyTo")
}

enum ReactionType {
  THUMBS_UP
  THUMBS_DOWN
  SMILE
  PARTY_POPPER
  SAD
  HEART
  ROCKET
  EYES
}

model Reaction {
  id String @id @unique @default(cuid())

  discussionId String
  discussion   Discussion @relation(fields: [discussionId], references: [id], onDelete: Cascade)

  replyId String?
  reply   Reply?  @relation(fields: [replyId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  reaction ReactionType

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Assignment {
  id          String @id @unique @default(cuid())
  title       String
  description Json?

  creatorId String
  creator   User   @relation(fields: [creatorId], references: [id], onDelete: Cascade)

  classRoomId String
  classRoom   ClassRoom @relation(fields: [classRoomId], references: [id], onDelete: Cascade)

  dueDate        DateTime
  lateSubmission Boolean? @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  submissions Submission[]
  media       Media[]
  events      Event[] // one-to-one relationship with event
  comments    Comment[]
}

model Comment {
  id String @id @unique @default(cuid())

  message String

  senderId String
  sender   User   @relation(name: "Sender", fields: [senderId], references: [id], onDelete: Cascade)

  receiverId String?
  receiver   User?   @relation(name: "Receiver", fields: [receiverId], references: [id], onDelete: Cascade)

  isEdited Boolean? @default(false)

  assignmentId String
  assignment   Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
}

enum SubmissionStatus {
  PENDING
  APPROVED
  CHANGES_REQUESTED
}

model Submission {
  id String @id @unique @default(cuid())

  memberId String
  member   Membership @relation(fields: [memberId], references: [id], onDelete: Cascade)

  assignmentId String
  assignment   Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)

  submissionStatus SubmissionStatus? @default(PENDING)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  media Media[]
}

model Folder {
  id String @id @unique @default(cuid())

  name String

  order Int

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  classroomId String?
  classroom   ClassRoom? @relation(fields: [classroomId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  notes Note[]
}

enum NoteType {
  CLASSROOM
  PERSONAL
}

model Note {
  id    String @id @unique @default(cuid())
  title String

  gradientClass String?
  coverImage    String?
  emojiUrl      String?

  creatorId String
  creator   User   @relation(fields: [creatorId], references: [id], onDelete: Cascade)

  content Json?

  noteType NoteType

  classroomId String?
  classroom   ClassRoom? @relation(fields: [classroomId], references: [id], onDelete: Cascade)

  folderId String
  folder   Folder @relation(fields: [folderId], references: [id], onDelete: Cascade)

  viewCount Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  topics        Topic[]
  conversations Conversation[]
}

model Topic {
  id String @id @unique @default(cuid())

  name String

  noteId String
  Note   Note   @relation(fields: [noteId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum MediaType {
  LINK
  DOCUMENT
}

model Media {
  id String @id @unique @default(cuid())

  assignmentId String
  assignment   Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)

  submissionId String?
  submission   Submission? @relation(fields: [submissionId], references: [id])

  mediaType MediaType

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  label String?
  url   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Event {
  id String @id @unique @default(cuid())

  title       String
  description Json?
  eventDate   DateTime

  assignmentId String?
  assignment   Assignment? @relation(fields: [assignmentId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ReportType {
  BUG_REPORT
  FEATURE_REQUEST
  GENERAL
}

enum ReportStatus {
  PENDING
  RESOLVED
  REJECTED
}

model Report {
  id String @id @unique @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  reportType   ReportType
  reportStatus ReportStatus? @default(PENDING)
  body         String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
