// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  // provider     = "mysql"
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // relationMode = "prisma"
}

model Account {
  id                 String  @id @unique @default(cuid())
  userId             String  @unique
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  oauth_token        String? @db.Text
  oauth_token_secret String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @unique @default(cuid())
  sessionToken String   @unique
  userId       String   @unique
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserType {
  STUDENT
  TEACHER
}

model User {
  id            String    @id @unique @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?

  role       UserType?
  university String?

  createdAt DateTime @default(now())

  accounts       Account[]
  sessions       Session[]
  sections       Section[]
  classrooms     ClassRoom[] //only teachers will have this
  announcements  Announcement[]
  comments       Comment[]
  memberships    Membership[] //only students will have this
  conversations  Conversation[]
  questions      Question[]
  answers        Answer[]
  media          Media[]
  studyMaterials StudyMaterial[]
  events         Event[]
}

enum SectionType {
  CREATION
  MEMBERSHIP
}

model Section {
  id String @id @unique @default(cuid())

  name      String
  isDefault Boolean @default(false)
  emojiUrl  String?

  creatorId String
  creator   User   @relation(fields: [creatorId], references: [id], onDelete: Cascade)

  sectionType SectionType
  order       Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  classrooms  ClassRoom[]
  memberships Membership[]
}

model ClassRoom {
  id          String  @id @unique @default(cuid())
  title       String
  description String?
  classCode   String  @unique

  sectionId String
  section   Section @relation(fields: [sectionId], references: [id], onDelete: Cascade)

  teacherId String
  teacher   User   @relation(fields: [teacherId], references: [id], onDelete: Cascade)

  viewCount Int? @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  students       Membership[]
  questions      Question[]
  announcements  Announcement[]
  conversations  Conversation[]
  studyMaterials StudyMaterial[]
}

model Membership {
  id String @id @unique @default(cuid())

  userId           String //can be both teacher or student
  user             User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  isTeacher        Boolean @default(false)
  renamedClassroom String?

  sectionId String
  section   Section @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  viewCount Int?    @default(0)

  classRoomId String
  classRoom   ClassRoom @relation(fields: [classRoomId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  submissions Submission[]
}

enum FEEDBACK_STATUS {
  LIKE
  DISLIKE
}

model Conversation {
  id String @id @unique @default(cuid())

  prompt String
  answer String

  feedback FEEDBACK_STATUS?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  classRoomId String
  classRoom   ClassRoom @relation(fields: [classRoomId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Question {
  id         String  @id @unique @default(cuid())
  message    String
  isAnswered Boolean @default(false)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  classRoomId String
  classRoom   ClassRoom @relation(fields: [classRoomId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  answers Answer[]
}

model Answer {
  id      String @id @unique @default(cuid())
  message String

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  questionId String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  selected Boolean? @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Announcement {
  id          String @id @unique @default(cuid())
  title       String
  description Json?

  creatorId String
  creator   User   @relation(fields: [creatorId], references: [id], onDelete: Cascade)

  classRoomId String
  classRoom   ClassRoom @relation(fields: [classRoomId], references: [id], onDelete: Cascade)

  dueDate        DateTime
  lateSubmission Boolean? @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  submissions Submission[]
  media       Media[]
  events      Event[] // one-to-one relationship with event
  comments    Comment[]
}

model Comment {
  id String @id @unique @default(cuid())

  message String

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  edited Boolean? @default(false)

  announcementId String
  announcement   Announcement @relation(fields: [announcementId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
}

model Submission {
  id String @id @unique @default(cuid())

  memberId String
  member   Membership @relation(fields: [memberId], references: [id], onDelete: Cascade)

  announcementId String
  announcement   Announcement @relation(fields: [announcementId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  media Media[]
}

model StudyMaterial {
  id    String  @id @unique @default(cuid())
  title String?

  creatorId String
  creator   User   @relation(fields: [creatorId], references: [id], onDelete: Cascade)

  content Json?

  classRoomId String?
  classRoom   ClassRoom? @relation(fields: [classRoomId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  topics Topic[]
}

model Topic {
  id String @id @unique @default(cuid())

  name String

  studyMaterialId String
  studyMaterial   StudyMaterial @relation(fields: [studyMaterialId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum MediaType {
  LINK
  DOCUMENT
}

model Media {
  id String @id @unique @default(cuid())

  announcementId String
  announcement   Announcement @relation(fields: [announcementId], references: [id], onDelete: Cascade)

  submissionId String?
  submission   Submission? @relation(fields: [submissionId], references: [id])

  mediaType MediaType

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  label String?
  url   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Event {
  id String @id @unique @default(cuid())

  title       String
  description String?
  eventDate   DateTime

  announcementId String?
  announcement   Announcement? @relation(fields: [announcementId], references: [id])

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
